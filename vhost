#!/bin/bash
if [ "$(id -u)" != "0" ]; then
  echo "Error: \"$(basename "$0")\" must run as root"
  exit 1
fi

cfg=$(dirname ${BASH_SOURCE[0]})/.settings.cfg

function config() {
  if [ ! -f $cfg ]
    then
    echo
    echo "* No settings file found."
    echo "  Default settings created"
    echo "  Take a look and tweak as you see fit!"
    echo 
    cat <<'EOF' > $cfg
# Top Level Domain
TLD="dev"

# Path to save SSL certificates/keys
certs="$HOME/ssl-certs"

# Path to vhost.conf file
vhosts="/etc/apache2/other/httpd-vhosts.conf"

# HTTP Port
port=80

# HTTPS Port (TLS/SSL)
ssl_port=443

# Create SSL by default
SSL=false

EOF
  fi
  ${EDITOR:-vi} $cfg
  exit 0
}

# Import config file
[ ! -f $cfg ] && config
. $cfg

[ -z $SSL ] && SSL=false

function show_help() {
  echo 
  echo "  Usage: $(basename "$0") { action } [ --options ]" >&2
  echo
  echo "  Action (Required)" 
  echo "    certs             Generate Certificate/Key for a host (default: \"$(basename "$SITEPATH")\")"
  echo "    add               Add this site to the list of VirtualHosts"
  echo "    remove, rm        Remove this site from the list of VirtualHosts"
  echo "    enable, en        Enable this site"
  echo "    disable, dis      Remove this site from the list of VirtualHosts"
  echo "    edit              Edit the associated files in \`${EDITOR:-vi}\`"
  echo "    config            Configure paths/variables/ports for your VirtualHosts"
  echo "    help              Show this message"
  echo 
  echo "  Options"
  echo "    --path, -p        Path to site root (default: \"$PWD\")"
  echo "    --host, -h        Hostname for local site (default: \"$(basename "$SITEPATH")\")"
  echo "    --file-host, -f   Base URL to search for files in \`sites/*/files\`"
  echo "                      Requires \`rewrite_mod\` to be enabled"
  echo "    --ssl             (Boolean) Create SSL hosts configured on port <$ssl_port>"
  echo "                      Default: $SSL"
  echo
  exit 0
}

while [[ $# > 0 ]]
do
key="$1"

case $key in
    -p|--path)
    SITEPATH="$2"
    shift # past argument
    ;;
    -h|--host)
    SITEHOST="$2"
    shift # past argument
    ;;
    --ssl)
    SSL="$2"
    shift
    ;;
    -f|--file-host)
    filesURL="$2"
    shift # past argument
    ;;
    add)
    ACTION="add"
    ;;
    certs)
    ACTION="create_cert"
    ;;
    rm|remove)
    ACTION="remove"
    ;;
    edit)
    ACTION="edit"
    break
    ;;
    en|enable)
    ACTION="enable_site"
    ;;
    dis|disable)
    ACTION="disable_site"
    ;;
    help)
      show_help
    ;;
    config)
      config
    ;;
    *)
      show_help
    ;;
esac
shift # past argument or value
done

[ -z $SITEPATH ] && SITEPATH="$PWD"
[ -z $SITEHOST ] && SITEHOST="$(basename "$SITEPATH")"
[ -z $ACTION ] && show_help

server="$SITEHOST"
vhost_dir="$(dirname $vhosts)"
host_file="/private/etc/hosts"
hosts="./sites"
host="$hosts/enabled/$server.conf"
sendSSL=""
FILES="</VirtualHost>"

function edit() {
  ${EDITOR:-vi} `echo $certs $vhosts $hosts`
  exit 0
}

function create_cert() {
  [ ! -d $certs ] && mkdir -p $certs
  cat > /tmp/openssl.cnf <<-EOF
  [req]
  distinguished_name = req_distinguished_name
  x509_extensions = v3_req
  prompt = no
  [req_distinguished_name]
  CN = *.${server}.$TLD
  [v3_req]
  keyUsage = keyEncipherment, dataEncipherment
  extendedKeyUsage = serverAuth
  subjectAltName = @alt_names
  [alt_names]
  DNS.1 = *.${server}.$TLD
  DNS.2 = ${server}.$TLD
EOF

  openssl req \
  -new \
  -newkey rsa:2048 \
  -sha1 \
  -days 3650 \
  -nodes \
  -x509 \
  -keyout ${certs}/${server}-ssl.key \
  -out ${certs}/${server}-ssl.crt \
  -config /tmp/openssl.cnf

  rm /tmp/openssl.cnf
  security add-trusted-cert -d -r trustRoot -k /Library/Keychains/System.keychain ${certs}/${server}-ssl.crt
}

function toggle_site(){
  local after="$1"
  local state="$hosts/enabled/$server.conf"
  if [[ ! $(find $hosts -maxdepth 2 -type f -name $server.conf) ]]; then
    echo "Error: \"$server\" not found"
    exit 1 
  fi

  [[ "$after" == "enabled" ]] && state="$hosts/disabled/$server.conf"
  if [[ "$(mv "$state" "$hosts/$after/$server.conf" 2>&1)" ]]; then 
    echo "\"$server\" has already been $after!"
    exit 0
  fi
}

function enable_site(){
  toggle_site "enabled"
  echo "Enabling site:"
  echo "HOST=\"$SITEHOST\""
}

function disable_site(){
  toggle_site "disabled"
  echo "Disabling site:"
  echo "HOST=\"$SITEHOST\""
}

function add(){
  echo
  echo "Adding site:"
  echo "PATH=\"$SITEPATH\""
  echo "HOST=\"$SITEHOST\""
  
  if [ "$SSL" == "true" ];
    then
    [[ ! -f ${certs}/${server}-ssl.crt || ! -f ${certs}/${server}-ssl.key ]] && create_cert
    sendSSL=$(cat <<-EOF
  
  <IfModule mod_rewrite.c>
    RewriteEngine on
    RewriteCond %{SERVER_PORT} !^$ssl_port\$
    RewriteRule ^/(.*) https://%{HTTP_HOST}/
  </IfModule>
EOF
)
  fi

  if [ ! -z $filesURL ]; 
    then
    FILES=$(cat <<-EOF
  <IfModule mod_rewrite.c>
    RewriteEngine on
    RewriteCond %{REQUEST_URI} ^/?sites/[^\/]*/files/.*$
    RewriteCond %{REQUEST_URI} !^/?sites/[^\/]*/files/css/.*$
    RewriteCond %{REQUEST_URI} !^/?sites/[^\/]*/files/js/.*$
    RewriteRule ^(.*)$ $filesURL/\$1
  </IfModule>
</VirtualHost>
EOF
)
  fi
  
  DIRECTORY=$(cat <<-EOF
  ServerName $server.$TLD
  DocumentRoot "$SITEPATH"
  <Directory "$SITEPATH">
    Options Indexes FollowSymLinks
    AllowOverride All
    Order allow,deny
    Allow from all
    Require all granted
  </Directory>
EOF
)

  cat > $host <<-EOF
<VirtualHost _default_:$port>$sendSSL
$DIRECTORY
EOF
if [ "$SSL" == "true" ];
  then
  cat >> $host <<-EOF
</VirtualHost>

<VirtualHost _default_:$ssl_port>
  SSLEngine on
  SSLCipherSuite ALL:!ADH:!EXPORT56:RC4+RSA:+HIGH:+MEDIUM:+LOW:+SSLv2:+EXP:+eNULL
  SSLCertificateFile "${certs}/${server}-ssl.crt"
  SSLCertificateKeyFile "${certs}/${server}-ssl.key"
$DIRECTORY
EOF
fi

cat >> $host <<-EOF
$FILES

EOF
echo
}

function remove() {
  echo
  local flag=false
  security delete-certificate -c $server.$TLD -t /Library/Keychains/System.keychain 2>/dev/null
  if [[ $(find $hosts -maxdepth 2 -type f -name $server.conf) ]]; then
    flag=true
    echo "  Removing VirtualHost Configuration:"
    echo "  PATH=\"$SITEPATH\""
    echo "  HOST=\"$SITEHOST\""
    find $hosts -maxdepth 2 -type f -name $server.conf -delete
  fi
  if [ -f ${certs}/${server}-ssl.crt ]; then
    flag=true
    echo "  Removing Certificate:"
    rm -rfv ${certs}/${server}-ssl.crt 
  fi
  if [ -f ${certs}/${server}-ssl.key ]; then
    flag=true
    echo "  Removing Key:"
    rm -rfv ${certs}/${server}-ssl.key
  fi
  if [ $flag == "false" ]; then
    echo "Unable to remove site:"
    echo "PATH=\"$SITEPATH\""
    echo "HOST=\"$SITEHOST\""
    echo
  fi
}


[ ! -d $vhost_dir ] && mkdir -p $vhost_dir
[ ! -f $vhosts ] && touch $vhosts

for i in $hosts/{enabled,disabled}
  do 
  [ ! -d $i ] && mkdir -p $i 
done

$ACTION

cat $hosts/enabled/*.conf > $vhosts 2>/dev/null

cat > $host_file <<-EOF
##
# Host Database
#
# localhost is used to configure the loopback interface
# when the system is booting.  Do not change this entry.
##
127.0.0.1           localhost
255.255.255.255     broadcasthost
::1                 localhost 
fe80::1%lo0         localhost
EOF

for i in $(find ./sites/enabled -type f -name "*.conf");
  do 
  this_host=$(basename "$i")
  echo "127.0.0.1           ${this_host%%.*}.$TLD" >> $host_file
done

# Flush Cache
dscacheutil -flushcache

# Restart apache if it's running
[ -f /usr/local/var/run/apache2/httpd.pid ] && httpd -k restart

